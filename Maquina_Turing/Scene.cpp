#include "stdafx.h"
Scene::Scene(){
	cursorPos=0;
	lbLang=std::shared_ptr<TextLabel>(new TextLabel(L"Máquina de Turing que toma una cadena con M '1's y N 'A's (M debe ser menor o igual a N) y sustituye los primeros M 'A' con 'B'. Los espacios en blanco serán representados con la letra 'b' minúscula."));
	lbLang->setFont(L"Microsoft Sans Serif");
	lbLang->setForeground(0.f,0.f,0.f,1.f);
	lbLang->setOpacity();
	lbLang->setLocale(L"en-US");
	lbLang->setPadding(0,0);
	lbLang->setTextSize(12.f);
	lbLang->setVisible(true);
	lbLang->setHorizontalTextAlignment(HorizontalConstants::LEFT);
	lbLang->setVerticalTextAlignment(VerticalConstants::CENTER_VERTICAL);
	D2DUISystem::getInstance().addDrawToQueue(1,*lbLang->drawing);
	tfInput=std::shared_ptr<TextBox>(new TextBox(L"b11AAAAAb"));
	tfInput->setPadding(0,0);
	tfInput->setEditable(true);
	tfInput->setEnabled(true);
	tfInput->setFont(L"Microsoft Sans Serif");
	tfInput->setForeground(0.f,0.f,0.f,1.f);
	tfInput->setHorizontalTextAlignment(HorizontalConstants::LEFT);
	tfInput->setVerticalTextAlignment(VerticalConstants::CENTER_VERTICAL);
	tfInput->setLocale(L"en-US");
	tfInput->setOpacity();	
	tfInput->setTextSize(12.f);
	tfInput->setVisible(true);
	D2DUISystem::getInstance().addDrawToQueue(1,*tfInput->drawing);
	lbInput=std::shared_ptr<TextLabel>(new TextLabel(L"Evaluar cadena:"));
	lbInput->setFont(L"Microsoft Sans Serif");
	lbInput->setForeground(0.f,0.f,0.f,1.f);
	lbInput->setOpacity();
	lbInput->setLocale(L"en-US");
	lbInput->setPadding(0,0);
	lbInput->setTextSize(12.f);
	lbInput->setVisible(true);
	lbInput->setHorizontalTextAlignment(HorizontalConstants::LEFT);
	lbInput->setVerticalTextAlignment(VerticalConstants::CENTER_VERTICAL);
	D2DUISystem::getInstance().addDrawToQueue(1,*lbInput->drawing);
	lbResultTitle=std::shared_ptr<TextLabel>(new TextLabel(L"Resultado:"));
	lbResultTitle->setFont(L"Microsoft Sans Serif");
	lbResultTitle->setForeground(0.f,0.f,0.f,1.f);
	lbResultTitle->setOpacity();
	lbResultTitle->setLocale(L"en-US");
	lbResultTitle->setPadding(0,0);
	lbResultTitle->setTextSize(12.f);
	lbResultTitle->setVisible(true);
	lbResultTitle->setHorizontalTextAlignment(HorizontalConstants::LEFT);
	lbResultTitle->setVerticalTextAlignment(VerticalConstants::CENTER_VERTICAL);
	D2DUISystem::getInstance().addDrawToQueue(1,*lbResultTitle->drawing);
	lbResultStatus=std::shared_ptr<TextLabel>(new TextLabel(L"Sin iniciar."));
	lbResultStatus->setFont(L"Microsoft Sans Serif");
	lbResultStatus->setForeground(0.f,0.f,0.f,1.f);
	lbResultStatus->setOpacity();
	lbResultStatus->setLocale(L"en-US");
	lbResultStatus->setPadding(0,0);
	lbResultStatus->setTextSize(12.f);
	lbResultStatus->setVisible(true);
	lbResultStatus->setHorizontalTextAlignment(HorizontalConstants::LEFT);
	lbResultStatus->setVerticalTextAlignment(VerticalConstants::CENTER_VERTICAL);
	D2DUISystem::getInstance().addDrawToQueue(1,*lbResultStatus->drawing);
	lbMarkerPos=std::shared_ptr<TextLabel>(new TextLabel(L"0"));
	lbMarkerPos->setFont(L"Microsoft Sans Serif");
	lbMarkerPos->setForeground(0.f,0.f,0.f,1.f);
	lbMarkerPos->setOpacity();
	lbMarkerPos->setLocale(L"en-US");
	lbMarkerPos->setPadding(0,0);
	lbMarkerPos->setTextSize(12.f);
	lbMarkerPos->setVisible(true);
	lbMarkerPos->setHorizontalTextAlignment(HorizontalConstants::LEFT);
	lbMarkerPos->setVerticalTextAlignment(VerticalConstants::CENTER_VERTICAL);
	D2DUISystem::getInstance().addDrawToQueue(1,*lbMarkerPos->drawing);
	btnStart=std::shared_ptr<Button>(new Button(L"Ejecutar"));
	btnStart->setForeground(0.f,0.f,0.f);
	btnStart->setTextSize(12.f);
	btnStart->setFont(L"Microsoft Sans Serif");
	btnStart->setOpacity();
	btnStart->setEnabled(true);
	btnStart->setVisible(true);
	btnStart->setPadding(0,0);
	btnStart->setHorizontalTextAlignment(HorizontalConstants::CENTER_HORIZONTAL);
	btnStart->setVerticalTextAlignment(VerticalConstants::CENTER_VERTICAL);
	D2DUISystem::getInstance().addDrawToQueue(1,*btnStart->drawing);
	marker=std::shared_ptr<ImageView>(new ImageView(L"Images\\Machine\\marker.png"));
	marker->setOpacity();
	marker->setVisible(true);
	selection=std::shared_ptr<ImageView>(new ImageView(L"Images\\Machine\\selection.png"));
	selection->setOpacity();
	selection->setVisible(true);
}
void Scene::recreateResources(std::shared_ptr<D2DHandle>&d2d,GameSettings settings){
	lbLang->setBounds(10,0,790,60);
	lbLang->recreateResources(d2d);
	tfInput->setBounds(170,70,320,100);
	tfInput->recreateResources(d2d);
	lbInput->setBounds(10,70,160,100);
	lbInput->recreateResources(d2d);
	btnStart->setBounds(330,70,480,100);
	btnStart->recreateResources(d2d);
	lbResultTitle->setBounds(10,110,160,140);
	lbResultTitle->recreateResources(d2d);
	lbResultStatus->setBounds(170,110,320,140);
	lbResultStatus->recreateResources(d2d);
	int markerLeft=10+(50*cursorPos)+15;
	marker->setBounds(markerLeft,200,markerLeft+20,220);
	marker->recreateResources(d2d);
	selection->setBounds(10+(50*cursorPos),220,10+(50*cursorPos)+50,270);
	selection->recreateResources(d2d);
	lbMarkerPos->setBounds(10,150,160,180);
	lbMarkerPos->recreateResources(d2d);
}